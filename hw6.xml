<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
int numSeats=3;
const int numCustomers = 4;

const int M = 3; // # semaphores
const int N = 5; // # processes (# customers + 1 barber)
typedef int [1,N-1] cust_id;

//semaphore names
const int barberReady = 0;
const int accessWRSeats = 1;
const int custReady = 2;

//names of processes
const int barber_id = 0;
//const int customer_id = 1; //change later to 1 ... N

chan semWait[M][N];
chan semSignal[M][N];
chan semGo [M][N];

</declaration>
	<template>
		<name>customer</name>
		<parameter>const int id</parameter>
		<declaration>int customer_id = id;
clock x;
void decr_seats(){
    numSeats--;
}</declaration>
		<location id="id0" x="-408" y="-59">
			<name x="-425" y="-93">leave</name>
		</location>
		<location id="id1" x="178" y="59">
			<urgent/>
		</location>
		<location id="id2" x="178" y="-59">
			<urgent/>
		</location>
		<location id="id3" x="76" y="136">
			<urgent/>
		</location>
		<location id="id4" x="178" y="-178">
			<urgent/>
		</location>
		<location id="id5" x="17" y="-289">
			<urgent/>
		</location>
		<location id="id6" x="-272" y="-289">
			<urgent/>
		</location>
		<location id="id7" x="-535" y="-136">
			<name x="-594" y="-145">arrive</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="guard" x="-518" y="-93">x&gt;100</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<nail x="-374" y="-8"/>
			<nail x="-433" y="-8"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-357" y="59">semGo[barberReady][customer_id]?</label>
			<label kind="assignment" x="-255" y="76">x:=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="94" y="80">semWait[barberReady][customer_id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="178" y="-17">semSignal[accessWRSeats][customer_id]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="178" y="-135">semSignal[custReady][customer_id]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="guard" x="-102" y="-272">numSeats &lt;= 0</label>
			<label kind="synchronisation" x="-365" y="-187">semSignal[accessWRSeats][customer_id]!</label>
			<label kind="assignment" x="-390" y="-174">x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="17" y="-272">numSeats &gt; 0</label>
			<label kind="assignment" x="85" y="-255">decr_seats()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-254" y="-310">semGo[accessWRSeats][customer_id]?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-612" y="-246">semWait[accessWRSeats][customer_id]!</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">barber</name>
		<declaration>// Place local declarations here.
void incr_seats(){
    numSeats++;
}</declaration>
		<location id="id8" x="-204" y="59">
			<urgent/>
		</location>
		<location id="id9" x="-204" y="-136">
			<urgent/>
		</location>
		<location id="id10" x="153" y="-153">
			<urgent/>
		</location>
		<location id="id11" x="153" y="-323">
			<urgent/>
		</location>
		<location id="id12" x="-17" y="-323">
			<urgent/>
		</location>
		<location id="id13" x="153" y="59">
			<urgent/>
		</location>
		<location id="id14" x="-204" y="-323">
			<name x="-280" y="-332">sleeping</name>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id9"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-476" y="-229">semSignal[accessWRSeats][barber_id]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-467" y="-42">semSignal[barberReady][barber_id]!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id8"/>
			<label kind="assignment" x="-68" y="34">incr_seats()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="161" y="-59">semGo[accessWRSeats][barber_id]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="161" y="-246">semWait[accessWRSeats][barber_id]!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-8" y="-357">semGo[custReady][barber_id]?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-238" y="-357">semWait[custReady][barber_id]!</label>
			<nail x="-187" y="-323"/>
		</transition>
	</template>
	<template>
		<name>BinarySemaphore</name>
		<parameter>const int id,  const int queue_size, const int init_val</parameter>
		<declaration>//The value of the semaphore
bool value = init_val;
//The queue of the semaphore
// -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}

bool emptyQueue ( )
{
  return (queue[0]==-1);
}</declaration>
		<location id="id15" x="384" y="64">
			<committed/>
		</location>
		<location id="id16" x="608" y="320">
			<committed/>
		</location>
		<location id="id17" x="352" y="96">
			<name x="288" y="64">overflow</name>
		</location>
		<location id="id18" x="480" y="192">
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id18"/>
			<label kind="assignment" x="408" y="72">initialize()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="select" x="256" y="192">p:int[0,N-1]</label>
			<label kind="guard" x="256" y="208">emptyQueue()</label>
			<label kind="synchronisation" x="256" y="224">semSignal[id][p]?</label>
			<label kind="assignment" x="256" y="240">value=1</label>
			<nail x="352" y="192"/>
			<nail x="352" y="224"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="select" x="552" y="104">p:int[0,N-1]</label>
			<label kind="guard" x="552" y="120">value==1</label>
			<label kind="synchronisation" x="552" y="136">semWait[id][p]?</label>
			<label kind="assignment" x="552" y="152">value=0,
q=p</label>
			<nail x="608" y="192"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="select" x="240" y="112">p:int[0,N-1]</label>
			<label kind="guard" x="240" y="128">value==0 &amp;&amp; fullQueue()</label>
			<label kind="synchronisation" x="240" y="144">semWait[id][p]?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="512" y="208">semGo[id][q]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="select" x="360" y="280">p:int[0,N-1]</label>
			<label kind="guard" x="360" y="296">not emptyQueue()</label>
			<label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label>
			<label kind="assignment" x="360" y="328">q=headQueue(),
deQueue()</label>
			<nail x="480" y="320"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="select" x="480" y="-8">p:int[0,N-1]</label>
			<label kind="guard" x="480" y="8">value==0 &amp;&amp; not fullQueue()</label>
			<label kind="synchronisation" x="480" y="24">semWait[id][p]?</label>
			<label kind="assignment" x="480" y="40">enQueue(p)</label>
			<nail x="480" y="64"/>
			<nail x="512" y="64"/>
		</transition>
	</template>
	<template>
		<name>Semaphore</name>
		<parameter>const int id,  const int queue_size, const int init_val</parameter>
		<declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration>
		<location id="id19" x="384" y="64">
			<committed/>
		</location>
		<location id="id20" x="608" y="320">
			<committed/>
		</location>
		<location id="id21" x="352" y="96">
			<name x="288" y="64">overflow</name>
		</location>
		<location id="id22" x="480" y="192">
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id19"/>
			<target ref="id22"/>
			<label kind="assignment" x="408" y="72">initialize()</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="select" x="272" y="192">p:int[0,N-1]</label>
			<label kind="guard" x="272" y="208">count&gt;=0</label>
			<label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label>
			<label kind="assignment" x="272" y="240">count++</label>
			<nail x="352" y="192"/>
			<nail x="352" y="224"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="select" x="552" y="104">p:int[0,N-1]</label>
			<label kind="guard" x="552" y="120">count&gt;0</label>
			<label kind="synchronisation" x="552" y="136">semWait[id][p]?</label>
			<label kind="assignment" x="552" y="152">count--,
q=p</label>
			<nail x="608" y="192"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="select" x="248" y="112">p:int[0,N-1]</label>
			<label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label>
			<label kind="synchronisation" x="248" y="144">semWait[id][p]?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="512" y="208">semGo[id][q]!</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="select" x="360" y="280">p:int[0,N-1]</label>
			<label kind="guard" x="360" y="296">count&lt;0</label>
			<label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label>
			<label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label>
			<nail x="480" y="320"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="select" x="480" y="-24">p:int[0,N-1]</label>
			<label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label>
			<label kind="synchronisation" x="480" y="8">semWait[id][p]?</label>
			<label kind="assignment" x="480" y="24">count--,
enQueue(p)</label>
			<nail x="480" y="64"/>
			<nail x="512" y="64"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
sem_barberReady = Semaphore(barberReady, 5, 0);
sem_accessWRSeats = Semaphore(accessWRSeats, 5, 1); // queue size should be big here?
sem_custReady = Semaphore(custReady, 5, 0);

Barber = barber();

Customer1 = customer(1);
Customer2 = customer(2);
Customer3 = customer(3);
Customer4 = customer(4);

// List one or more processes to be composed into a system.
system Barber, Customer1, Customer2, Customer3, Customer4, sem_barberReady, sem_accessWRSeats, sem_custReady;
</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
